// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Estancia;
import es.uca.iw.hoteloasis.domain.EstanciaDataOnDemand;
import es.uca.iw.hoteloasis.domain.HabitacionDataOnDemand;
import es.uca.iw.hoteloasis.domain.LlamadaDataOnDemand;
import es.uca.iw.hoteloasis.domain.ReservaDataOnDemand;
import es.uca.iw.hoteloasis.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EstanciaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EstanciaDataOnDemand: @Component;
    
    private Random EstanciaDataOnDemand.rnd = new SecureRandom();
    
    private List<Estancia> EstanciaDataOnDemand.data;
    
    @Autowired
    HabitacionDataOnDemand EstanciaDataOnDemand.habitacionDataOnDemand;
    
    @Autowired
    LlamadaDataOnDemand EstanciaDataOnDemand.llamadaDataOnDemand;
    
    @Autowired
    ReservaDataOnDemand EstanciaDataOnDemand.reservaDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand EstanciaDataOnDemand.usuarioDataOnDemand;
    
    public Estancia EstanciaDataOnDemand.getNewTransientEstancia(int index) {
        Estancia obj = new Estancia();
        setFecha_check_in(obj, index);
        setFecha_check_out(obj, index);
        return obj;
    }
    
    public void EstanciaDataOnDemand.setFecha_check_in(Estancia obj, int index) {
        Date fecha_check_in = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_check_in(fecha_check_in);
    }
    
    public void EstanciaDataOnDemand.setFecha_check_out(Estancia obj, int index) {
        Date fecha_check_out = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_check_out(fecha_check_out);
    }
    
    public Estancia EstanciaDataOnDemand.getSpecificEstancia(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Estancia obj = data.get(index);
        Long id = obj.getId();
        return Estancia.findEstancia(id);
    }
    
    public Estancia EstanciaDataOnDemand.getRandomEstancia() {
        init();
        Estancia obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Estancia.findEstancia(id);
    }
    
    public boolean EstanciaDataOnDemand.modifyEstancia(Estancia obj) {
        return false;
    }
    
    public void EstanciaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Estancia.findEstanciaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Estancia' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Estancia>();
        for (int i = 0; i < 10; i++) {
            Estancia obj = getNewTransientEstancia(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
