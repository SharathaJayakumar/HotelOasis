// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Bebida;
import es.uca.iw.hoteloasis.domain.BebidaDataOnDemand;
import es.uca.iw.hoteloasis.domain.Minibar;
import es.uca.iw.hoteloasis.domain.MinibarDataOnDemand;
import es.uca.iw.hoteloasis.domain.Minibar_bebida;
import es.uca.iw.hoteloasis.domain.Minibar_bebidaDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect Minibar_bebidaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: Minibar_bebidaDataOnDemand: @Component;
    
    private Random Minibar_bebidaDataOnDemand.rnd = new SecureRandom();
    
    private List<Minibar_bebida> Minibar_bebidaDataOnDemand.data;
    
    @Autowired
    BebidaDataOnDemand Minibar_bebidaDataOnDemand.bebidaDataOnDemand;
    
    @Autowired
    MinibarDataOnDemand Minibar_bebidaDataOnDemand.minibarDataOnDemand;
    
    public Minibar_bebida Minibar_bebidaDataOnDemand.getNewTransientMinibar_bebida(int index) {
        Minibar_bebida obj = new Minibar_bebida();
        setBebida(obj, index);
        setCantidad(obj, index);
        setMinibar(obj, index);
        return obj;
    }
    
    public void Minibar_bebidaDataOnDemand.setBebida(Minibar_bebida obj, int index) {
        Bebida bebida = bebidaDataOnDemand.getRandomBebida();
        obj.setBebida(bebida);
    }
    
    public void Minibar_bebidaDataOnDemand.setCantidad(Minibar_bebida obj, int index) {
        int cantidad = index;
        obj.setCantidad(cantidad);
    }
    
    public void Minibar_bebidaDataOnDemand.setMinibar(Minibar_bebida obj, int index) {
        Minibar minibar = minibarDataOnDemand.getRandomMinibar();
        obj.setMinibar(minibar);
    }
    
    public Minibar_bebida Minibar_bebidaDataOnDemand.getSpecificMinibar_bebida(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Minibar_bebida obj = data.get(index);
        Long id = obj.getId();
        return Minibar_bebida.findMinibar_bebida(id);
    }
    
    public Minibar_bebida Minibar_bebidaDataOnDemand.getRandomMinibar_bebida() {
        init();
        Minibar_bebida obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Minibar_bebida.findMinibar_bebida(id);
    }
    
    public boolean Minibar_bebidaDataOnDemand.modifyMinibar_bebida(Minibar_bebida obj) {
        return false;
    }
    
    public void Minibar_bebidaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Minibar_bebida.findMinibar_bebidaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Minibar_bebida' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Minibar_bebida>();
        for (int i = 0; i < 10; i++) {
            Minibar_bebida obj = getNewTransientMinibar_bebida(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
