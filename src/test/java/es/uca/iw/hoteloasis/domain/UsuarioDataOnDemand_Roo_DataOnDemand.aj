// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Rol;
import es.uca.iw.hoteloasis.domain.Usuario;
import es.uca.iw.hoteloasis.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UsuarioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsuarioDataOnDemand: @Component;
    
    private Random UsuarioDataOnDemand.rnd = new SecureRandom();
    
    private List<Usuario> UsuarioDataOnDemand.data;
    
    public Usuario UsuarioDataOnDemand.getNewTransientUsuario(int index) {
        Usuario obj = new Usuario();
        setClave(obj, index);
        setEmail(obj, index);
        setEnabled(obj, index);
        setNombre(obj, index);
        setNombre_usuario(obj, index);
        setPrimer_apellido(obj, index);
        setRol(obj, index);
        setSegundo_apellido(obj, index);
        return obj;
    }
    
    public void UsuarioDataOnDemand.setClave(Usuario obj, int index) {
        String clave = "clave_" + index;
        if (clave.length() > 300) {
            clave = clave.substring(0, 300);
        }
        obj.setClave(clave);
    }
    
    public void UsuarioDataOnDemand.setEmail(Usuario obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 50) {
            email = email.substring(0, 50);
        }
        obj.setEmail(email);
    }
    
    public void UsuarioDataOnDemand.setEnabled(Usuario obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void UsuarioDataOnDemand.setNombre(Usuario obj, int index) {
        String nombre = "nombre_" + index;
        if (nombre.length() > 30) {
            nombre = nombre.substring(0, 30);
        }
        obj.setNombre(nombre);
    }
    
    public void UsuarioDataOnDemand.setNombre_usuario(Usuario obj, int index) {
        String nombre_usuario = "nombre_usuario_" + index;
        if (nombre_usuario.length() > 30) {
            nombre_usuario = nombre_usuario.substring(0, 30);
        }
        obj.setNombre_usuario(nombre_usuario);
    }
    
    public void UsuarioDataOnDemand.setPrimer_apellido(Usuario obj, int index) {
        String primer_apellido = "primer_apellido_" + index;
        if (primer_apellido.length() > 30) {
            primer_apellido = primer_apellido.substring(0, 30);
        }
        obj.setPrimer_apellido(primer_apellido);
    }
    
    public void UsuarioDataOnDemand.setRol(Usuario obj, int index) {
        Rol rol = null;
        obj.setRol(rol);
    }
    
    public void UsuarioDataOnDemand.setSegundo_apellido(Usuario obj, int index) {
        String segundo_apellido = "segundo_apellido_" + index;
        if (segundo_apellido.length() > 30) {
            segundo_apellido = segundo_apellido.substring(0, 30);
        }
        obj.setSegundo_apellido(segundo_apellido);
    }
    
    public Usuario UsuarioDataOnDemand.getSpecificUsuario(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Usuario obj = data.get(index);
        Long id = obj.getId();
        return Usuario.findUsuario(id);
    }
    
    public Usuario UsuarioDataOnDemand.getRandomUsuario() {
        init();
        Usuario obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Usuario.findUsuario(id);
    }
    
    public boolean UsuarioDataOnDemand.modifyUsuario(Usuario obj) {
        return false;
    }
    
    public void UsuarioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Usuario.findUsuarioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Usuario' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Usuario>();
        for (int i = 0; i < 10; i++) {
            Usuario obj = getNewTransientUsuario(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
