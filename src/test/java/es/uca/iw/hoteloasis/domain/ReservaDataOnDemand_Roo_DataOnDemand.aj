// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Categoria;
import es.uca.iw.hoteloasis.domain.CategoriaDataOnDemand;
import es.uca.iw.hoteloasis.domain.Habitacion_tipo;
import es.uca.iw.hoteloasis.domain.Hotel;
import es.uca.iw.hoteloasis.domain.HotelDataOnDemand;
import es.uca.iw.hoteloasis.domain.Reserva;
import es.uca.iw.hoteloasis.domain.ReservaDataOnDemand;
import es.uca.iw.hoteloasis.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ReservaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ReservaDataOnDemand: @Component;
    
    private Random ReservaDataOnDemand.rnd = new SecureRandom();
    
    private List<Reserva> ReservaDataOnDemand.data;
    
    @Autowired
    CategoriaDataOnDemand ReservaDataOnDemand.categoriaDataOnDemand;
    
    @Autowired
    HotelDataOnDemand ReservaDataOnDemand.hotelDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand ReservaDataOnDemand.usuarioDataOnDemand;
    
    public Reserva ReservaDataOnDemand.getNewTransientReserva(int index) {
        Reserva obj = new Reserva();
        setCama_supletoria(obj, index);
        setCategoria(obj, index);
        setCoste_reserva(obj, index);
        setFecha_cancelacion(obj, index);
        setFecha_entrada(obj, index);
        setFecha_reserva(obj, index);
        setFecha_salida(obj, index);
        setHotel(obj, index);
        setTipo(obj, index);
        return obj;
    }
    
    public void ReservaDataOnDemand.setCama_supletoria(Reserva obj, int index) {
        Boolean cama_supletoria = Boolean.TRUE;
        obj.setCama_supletoria(cama_supletoria);
    }
    
    public void ReservaDataOnDemand.setCategoria(Reserva obj, int index) {
        Categoria categoria = categoriaDataOnDemand.getRandomCategoria();
        obj.setCategoria(categoria);
    }
    
    public void ReservaDataOnDemand.setCoste_reserva(Reserva obj, int index) {
        double coste_reserva = new Integer(index).doubleValue();
        obj.setCoste_reserva(coste_reserva);
    }
    
    public void ReservaDataOnDemand.setFecha_cancelacion(Reserva obj, int index) {
        Date fecha_cancelacion = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_cancelacion(fecha_cancelacion);
    }
    
    public void ReservaDataOnDemand.setFecha_entrada(Reserva obj, int index) {
        Date fecha_entrada = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_entrada(fecha_entrada);
    }
    
    public void ReservaDataOnDemand.setFecha_reserva(Reserva obj, int index) {
        Date fecha_reserva = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_reserva(fecha_reserva);
    }
    
    public void ReservaDataOnDemand.setFecha_salida(Reserva obj, int index) {
        Date fecha_salida = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_salida(fecha_salida);
    }
    
    public void ReservaDataOnDemand.setHotel(Reserva obj, int index) {
        Hotel hotel = hotelDataOnDemand.getRandomHotel();
        obj.setHotel(hotel);
    }
    
    public void ReservaDataOnDemand.setTipo(Reserva obj, int index) {
        Habitacion_tipo tipo = Habitacion_tipo.class.getEnumConstants()[0];
        obj.setTipo(tipo);
    }
    
    public Reserva ReservaDataOnDemand.getSpecificReserva(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Reserva obj = data.get(index);
        Long id = obj.getId();
        return Reserva.findReserva(id);
    }
    
    public Reserva ReservaDataOnDemand.getRandomReserva() {
        init();
        Reserva obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Reserva.findReserva(id);
    }
    
    public boolean ReservaDataOnDemand.modifyReserva(Reserva obj) {
        return false;
    }
    
    public void ReservaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Reserva.findReservaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Reserva' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Reserva>();
        for (int i = 0; i < 10; i++) {
            Reserva obj = getNewTransientReserva(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
