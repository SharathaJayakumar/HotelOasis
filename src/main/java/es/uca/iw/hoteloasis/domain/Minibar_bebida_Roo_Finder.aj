// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Bebida;
import es.uca.iw.hoteloasis.domain.Minibar;
import es.uca.iw.hoteloasis.domain.Minibar_bebida;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Minibar_bebida_Roo_Finder {
    
    public static Long Minibar_bebida.countFindMinibar_bebidasByMinibarAndBebida(Minibar minibar, Bebida bebida) {
        if (minibar == null) throw new IllegalArgumentException("The minibar argument is required");
        if (bebida == null) throw new IllegalArgumentException("The bebida argument is required");
        EntityManager em = Minibar_bebida.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Minibar_bebida AS o WHERE o.minibar = :minibar AND o.bebida = :bebida", Long.class);
        q.setParameter("minibar", minibar);
        q.setParameter("bebida", bebida);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Minibar_bebida> Minibar_bebida.findMinibar_bebidasByMinibarAndBebida(Minibar minibar, Bebida bebida) {
        if (minibar == null) throw new IllegalArgumentException("The minibar argument is required");
        if (bebida == null) throw new IllegalArgumentException("The bebida argument is required");
        EntityManager em = Minibar_bebida.entityManager();
        TypedQuery<Minibar_bebida> q = em.createQuery("SELECT o FROM Minibar_bebida AS o WHERE o.minibar = :minibar AND o.bebida = :bebida", Minibar_bebida.class);
        q.setParameter("minibar", minibar);
        q.setParameter("bebida", bebida);
        return q;
    }
    
    public static TypedQuery<Minibar_bebida> Minibar_bebida.findMinibar_bebidasByMinibarAndBebida(Minibar minibar, Bebida bebida, String sortFieldName, String sortOrder) {
        if (minibar == null) throw new IllegalArgumentException("The minibar argument is required");
        if (bebida == null) throw new IllegalArgumentException("The bebida argument is required");
        EntityManager em = Minibar_bebida.entityManager();
        String jpaQuery = "SELECT o FROM Minibar_bebida AS o WHERE o.minibar = :minibar AND o.bebida = :bebida";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Minibar_bebida> q = em.createQuery(jpaQuery, Minibar_bebida.class);
        q.setParameter("minibar", minibar);
        q.setParameter("bebida", bebida);
        return q;
    }
    
}
