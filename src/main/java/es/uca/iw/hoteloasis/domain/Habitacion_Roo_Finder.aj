// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Categoria;
import es.uca.iw.hoteloasis.domain.Habitacion;
import es.uca.iw.hoteloasis.domain.Habitacion_estado;
import es.uca.iw.hoteloasis.domain.Habitacion_tipo;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Habitacion_Roo_Finder {
    
    public static Long Habitacion.countFindHabitacionsByTipoAndCategoriaAndEstado(Habitacion_tipo tipo, Categoria categoria, Habitacion_estado estado) {
        if (tipo == null) throw new IllegalArgumentException("The tipo argument is required");
        if (categoria == null) throw new IllegalArgumentException("The categoria argument is required");
        if (estado == null) throw new IllegalArgumentException("The estado argument is required");
        EntityManager em = Habitacion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Habitacion AS o WHERE o.tipo = :tipo AND o.categoria = :categoria AND o.estado = :estado", Long.class);
        q.setParameter("tipo", tipo);
        q.setParameter("categoria", categoria);
        q.setParameter("estado", estado);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Habitacion> Habitacion.findHabitacionsByTipoAndCategoriaAndEstado(Habitacion_tipo tipo, Categoria categoria, Habitacion_estado estado) {
        if (tipo == null) throw new IllegalArgumentException("The tipo argument is required");
        if (categoria == null) throw new IllegalArgumentException("The categoria argument is required");
        if (estado == null) throw new IllegalArgumentException("The estado argument is required");
        EntityManager em = Habitacion.entityManager();
        TypedQuery<Habitacion> q = em.createQuery("SELECT o FROM Habitacion AS o WHERE o.tipo = :tipo AND o.categoria = :categoria AND o.estado = :estado", Habitacion.class);
        q.setParameter("tipo", tipo);
        q.setParameter("categoria", categoria);
        q.setParameter("estado", estado);
        return q;
    }
    
    public static TypedQuery<Habitacion> Habitacion.findHabitacionsByTipoAndCategoriaAndEstado(Habitacion_tipo tipo, Categoria categoria, Habitacion_estado estado, String sortFieldName, String sortOrder) {
        if (tipo == null) throw new IllegalArgumentException("The tipo argument is required");
        if (categoria == null) throw new IllegalArgumentException("The categoria argument is required");
        if (estado == null) throw new IllegalArgumentException("The estado argument is required");
        EntityManager em = Habitacion.entityManager();
        String jpaQuery = "SELECT o FROM Habitacion AS o WHERE o.tipo = :tipo AND o.categoria = :categoria AND o.estado = :estado";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Habitacion> q = em.createQuery(jpaQuery, Habitacion.class);
        q.setParameter("tipo", tipo);
        q.setParameter("categoria", categoria);
        q.setParameter("estado", estado);
        return q;
    }
    
}
