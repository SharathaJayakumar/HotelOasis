// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.hoteloasis.domain;

import es.uca.iw.hoteloasis.domain.Estancia;
import es.uca.iw.hoteloasis.domain.Habitacion;
import es.uca.iw.hoteloasis.domain.Reserva;
import es.uca.iw.hoteloasis.domain.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Estancia_Roo_Finder {
    
    public static Long Estancia.countFindEstanciasByReserva(Reserva reserva) {
        if (reserva == null) throw new IllegalArgumentException("The reserva argument is required");
        EntityManager em = Estancia.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Estancia AS o WHERE o.reserva = :reserva", Long.class);
        q.setParameter("reserva", reserva);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Estancia.countFindEstanciasByUsuario(Usuario usuario) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Estancia.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Estancia AS o WHERE o.usuario = :usuario", Long.class);
        q.setParameter("usuario", usuario);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Estancia.countFindEstanciasByUsuarioAndHabitacion(Usuario usuario, Habitacion habitacion) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        if (habitacion == null) throw new IllegalArgumentException("The habitacion argument is required");
        EntityManager em = Estancia.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Estancia AS o WHERE o.usuario = :usuario AND o.habitacion = :habitacion", Long.class);
        q.setParameter("usuario", usuario);
        q.setParameter("habitacion", habitacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Estancia> Estancia.findEstanciasByReserva(Reserva reserva) {
        if (reserva == null) throw new IllegalArgumentException("The reserva argument is required");
        EntityManager em = Estancia.entityManager();
        TypedQuery<Estancia> q = em.createQuery("SELECT o FROM Estancia AS o WHERE o.reserva = :reserva", Estancia.class);
        q.setParameter("reserva", reserva);
        return q;
    }
    
    public static TypedQuery<Estancia> Estancia.findEstanciasByReserva(Reserva reserva, String sortFieldName, String sortOrder) {
        if (reserva == null) throw new IllegalArgumentException("The reserva argument is required");
        EntityManager em = Estancia.entityManager();
        String jpaQuery = "SELECT o FROM Estancia AS o WHERE o.reserva = :reserva";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Estancia> q = em.createQuery(jpaQuery, Estancia.class);
        q.setParameter("reserva", reserva);
        return q;
    }
    
    public static TypedQuery<Estancia> Estancia.findEstanciasByUsuario(Usuario usuario, String sortFieldName, String sortOrder) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Estancia.entityManager();
        String jpaQuery = "SELECT o FROM Estancia AS o WHERE o.usuario = :usuario";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Estancia> q = em.createQuery(jpaQuery, Estancia.class);
        q.setParameter("usuario", usuario);
        return q;
    }
    
    public static TypedQuery<Estancia> Estancia.findEstanciasByUsuarioAndHabitacion(Usuario usuario, Habitacion habitacion, String sortFieldName, String sortOrder) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        if (habitacion == null) throw new IllegalArgumentException("The habitacion argument is required");
        EntityManager em = Estancia.entityManager();
        String jpaQuery = "SELECT o FROM Estancia AS o WHERE o.usuario = :usuario AND o.habitacion = :habitacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Estancia> q = em.createQuery(jpaQuery, Estancia.class);
        q.setParameter("usuario", usuario);
        q.setParameter("habitacion", habitacion);
        return q;
    }
    
}
